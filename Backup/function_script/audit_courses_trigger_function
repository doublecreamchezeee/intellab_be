-- FUNCTION: public.audit_courses_trigger_function()

-- DROP FUNCTION IF EXISTS public.audit_courses_trigger_function();

CREATE OR REPLACE FUNCTION public.audit_courses_trigger_function()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    current_user_id TEXT;
	current_user_role TEXT;
BEGIN
    current_user_id := current_setting('audit.user_id', true);
	current_user_role := current_setting('audit.user_role', true);

    IF (current_user_id IS NULL) THEN
		current_user_id := 'AMBIGOUS_USER';
		current_user_role := 'AMBIGOUS_ROLE';
	END IF;

	IF (current_user_role = 'user' and TG_OP = 'UPDATE') THEN
		RETURN NEW;
	END IF;

    IF (TG_OP = 'DELETE') THEN
        INSERT INTO audit_logs (table_name, record_id, action, user_id, user_role, old_data)
        VALUES (TG_TABLE_NAME, OLD.course_id, 'DELETE', current_user_id, current_user_role, to_jsonb(OLD));
        RETURN OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO audit_logs (table_name, record_id, action, user_id, user_role, old_data, new_data)
        VALUES (TG_TABLE_NAME, NEW.course_id, 'UPDATE', current_user_id, current_user_role, to_jsonb(OLD), to_jsonb(NEW));
        RETURN NEW;
    ELSIF (TG_OP = 'INSERT') THEN
        INSERT INTO audit_logs (table_name, record_id, action, user_id, user_role, new_data)
        VALUES (TG_TABLE_NAME, NEW.course_id, 'INSERT', current_user_id, current_user_role, to_jsonb(NEW));
        RETURN NEW;
    END IF;
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.audit_courses_trigger_function()
    OWNER TO postgres;

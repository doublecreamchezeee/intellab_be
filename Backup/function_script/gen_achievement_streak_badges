-- FUNCTION: public.gen_achievement_streak_badges()

-- DROP FUNCTION IF EXISTS public.gen_achievement_streak_badges();

CREATE OR REPLACE FUNCTION public.gen_achievement_streak_badges()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
	user_uuid UUID;
BEGIN
	IF (NEW.streak_score = 14) THEN
		user_uuid := uuid_in(encode(substring(digest(NEW.user_uid, 'sha256') for 16), 'hex')::cstring);
		INSERT INTO achievements (user_id, achieved_date, badge_id)
		SELECT user_uuid, now(), 9
		WHERE NOT EXISTS (SELECT 1 FROM achievements where user_id = user_uuid and badge_id = 9);
	ELSIF (NEW.streak_score = 50) THEN
		user_uuid := uuid_in(encode(substring(digest(NEW.user_uid, 'sha256') for 16), 'hex')::cstring);
		INSERT INTO achievements (user_id, achieved_date, badge_id)
		SELECT user_uuid, now(), 10
		WHERE NOT EXISTS (SELECT 1 FROM achievements where user_id = user_uuid and badge_id = 10);
	ELSIF (NEW.streak_score = 150) THEN
		user_uuid := uuid_in(encode(substring(digest(NEW.user_uid, 'sha256') for 16), 'hex')::cstring);
		INSERT INTO achievements (user_id, achieved_date, badge_id)
		SELECT user_uuid, now(), 11
		WHERE NOT EXISTS (SELECT 1 FROM achievements where user_id = user_uuid and badge_id = 11);
	END IF;
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.gen_achievement_streak_badges()
    OWNER TO postgres;
